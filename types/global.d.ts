/** Global definitions for development **/

// for style loader
declare module '*.css' {
  const styles: any;
  export = styles;
}

// Omit type https://github.com/Microsoft/TypeScript/issues/12215#issuecomment-377567046
type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type PartialPick<T, K extends keyof T> = Partial<T> & Pick<T, K>;

declare namespace API {
  export interface IArea {
    zone: string;
    municipality: string;
    area: string;
  }

  export interface IStation {
    id: number;
    zone: string;
    municipality: string;
    area: string;
    station: string;
    eoi: string;
    latitude: number;
    longitude: number;
    owner: string;
    status: string;
    description: string;
    firstMeasurment: string;
    lastMeasurment: string;
    components: string;
  }

  export interface IComp {
    component: string;
    topic: string;
  }
  // Generated by https://quicktype.io

  export interface IAqiLookup {
    component: string;
    unit: string;
    aqis: Aqi[];
  }

  export interface Aqi {
    index: number;
    fromValue: number;
    toValue: number;
    color: string;
    text: string;
    shortDescription: string;
    description: string;
    advice: string;
  }
}
